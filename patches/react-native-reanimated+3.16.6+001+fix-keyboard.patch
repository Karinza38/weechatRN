diff --git a/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm b/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
index 1b556f6..9dfd6c1 100644
--- a/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
+++ b/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
@@ -25,6 +25,7 @@ @implementation REAKeyboardEventObserver {
   float _targetKeyboardHeight;
   REAUIView *_keyboardView;
   bool _isKeyboardObserverAttached;
+  bool _isInteractiveDismissalCanceled;
 }
 
 - (instancetype)init
@@ -35,6 +36,7 @@ - (instancetype)init
   _state = UNKNOWN;
   _animationStartTimestamp = 0;
   _isKeyboardObserverAttached = false;
+  _isInteractiveDismissalCanceled = false;
   NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
 
   [notificationCenter addObserver:self
@@ -169,31 +171,13 @@ - (float)getAnimatingKeyboardHeight
   return keyboardHeight;
 }
 
-- (float)getStaticKeyboardHeight
-{
-  CGRect measuringFrame = _measuringView.frame;
-  CGFloat keyboardHeight = measuringFrame.size.height;
-  return keyboardHeight;
-}
-
 - (void)updateKeyboardFrame
 {
-  CGFloat keyboardHeight = 0;
   bool isKeyboardAnimationRunning = [self hasAnyAnimation:_measuringView];
   if (isKeyboardAnimationRunning) {
-    keyboardHeight = [self getAnimatingKeyboardHeight];
-  } else {
-    // measuring view is no longer running an animation, we should settle in OPEN/CLOSE state
-    if (_state == OPENING || _state == CLOSING) {
-      _state = _state == OPENING ? OPEN : CLOSED;
-    }
-    if (_state == OPEN || _state == CLOSED) {
-      keyboardHeight = [self getStaticKeyboardHeight];
-    }
-    // stop display link updates if no animation is running
-    [[self getDisplayLink] setPaused:YES];
+    CGFloat keyboardHeight = [self getAnimatingKeyboardHeight];
+    [self runListeners:keyboardHeight];
   }
-  [self runListeners:keyboardHeight];
 }
 
 - (void)keyboardWillChangeFrame:(NSNotification *)notification
@@ -202,37 +186,46 @@ - (void)keyboardWillChangeFrame:(NSNotification *)notification
   CGRect beginFrame = [[userInfo objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue];
   CGRect endFrame = [[userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];
   NSTimeInterval animationDuration = [[userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] doubleValue];
-  CGSize windowSize = [[[UIApplication sharedApplication] delegate] window].frame.size;
+  auto window = [[[UIApplication sharedApplication] delegate] window];
+  CGSize windowSize = window.frame.size;
+
+  beginFrame = [window convertRect:beginFrame fromCoordinateSpace:window.screen.coordinateSpace];
+  endFrame = [window convertRect:endFrame fromCoordinateSpace:window.screen.coordinateSpace];
 
-  _initialKeyboardHeight = windowSize.height - beginFrame.origin.y;
+  _initialKeyboardHeight = CGRectGetMaxY(beginFrame) > 0 ? windowSize.height - beginFrame.origin.y : 0;
   _targetKeyboardHeight = windowSize.height - endFrame.origin.y;
 
+  bool prefersCrossFade = false;
+#if __has_include(<UIKit/UIAccessibility.h>)
+  prefersCrossFade = UIAccessibilityPrefersCrossFadeTransitions();
+#endif
+  if (prefersCrossFade && beginFrame.origin.y == 0) {
+    _initialKeyboardHeight = 0;
+  }
+
   /*
-    This may seem a bit confusing, but usually, the state should be either OPENED or CLOSED.
-    However, if it shows as OPENING, it means that the interactive dismissal was canceled.
+   If interactive dismissal was canceled, beginFrame may not reflect the latest position
+   of the keyboard. We need to check whether interactive dismissal was canceled, get the
+   latest frame directly from the keyboardView, and force an opening animation.
   */
-  bool isInteractiveMode = _state == OPENING;
-  if (_targetKeyboardHeight > 0 && _state != OPEN) {
-    _state = OPENING;
-  } else if (_targetKeyboardHeight == 0 && _state != CLOSED) {
-    _state = CLOSING;
-  }
+  bool forceAnimation = false;
   auto keyboardView = [self getKeyboardView];
-  bool hasKeyboardAnimation = [self hasAnyAnimation:keyboardView];
-  if (isInteractiveMode) {
-    // This condition can be met after canceling interactive dismissal.
+  if (_state == CLOSING) {
+    _targetKeyboardHeight = 0;
+  } else if (_isInteractiveDismissalCanceled) {
     _initialKeyboardHeight = windowSize.height - keyboardView.frame.origin.y;
+    forceAnimation = true;
   }
+  _isInteractiveDismissalCanceled = false;
 
-  if (hasKeyboardAnimation || isInteractiveMode) {
+  bool hasKeyboardAnimation = [self hasAnyAnimation:keyboardView];
+  if (hasKeyboardAnimation || forceAnimation) {
     _measuringView.frame = CGRectMake(0, -1, 0, _initialKeyboardHeight);
     [UIView animateWithDuration:animationDuration
                      animations:^{
                        self->_measuringView.frame = CGRectMake(0, -1, 0, self->_targetKeyboardHeight);
                      }];
     [self runUpdater];
-  } else {
-    [self runListeners:_targetKeyboardHeight];
   }
 }
 
@@ -249,8 +242,8 @@ - (int)subscribeForKeyboardEvents:(KeyboardEventListenerBlock)listener
     if ([self->_listeners count] == 0) {
       NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
       [notificationCenter addObserver:self
-                             selector:@selector(keyboardWillChangeFrame:)
-                                 name:UIKeyboardWillChangeFrameNotification
+                             selector:@selector(keyboardWillShow:)
+                                 name:UIKeyboardWillShowNotification
                                object:nil];
       [notificationCenter addObserver:self
                              selector:@selector(keyboardDidShow:)
@@ -260,6 +253,10 @@ - (int)subscribeForKeyboardEvents:(KeyboardEventListenerBlock)listener
                              selector:@selector(keyboardWillHide:)
                                  name:UIKeyboardWillHideNotification
                                object:nil];
+      [notificationCenter addObserver:self
+                             selector:@selector(keyboardDidHide:)
+                                 name:UIKeyboardDidHideNotification
+                               object:nil];
     }
 
     [self->_listeners setObject:listener forKey:listenerId];
@@ -274,9 +271,10 @@ - (void)unsubscribeFromKeyboardEvents:(int)listenerId
     [self->_listeners removeObjectForKey:_listenerId];
     if ([self->_listeners count] == 0) {
       NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
-      [notificationCenter removeObserver:self name:UIKeyboardWillChangeFrameNotification object:nil];
+      [notificationCenter removeObserver:self name:UIKeyboardWillShowNotification object:nil];
       [notificationCenter removeObserver:self name:UIKeyboardDidShowNotification object:nil];
       [notificationCenter removeObserver:self name:UIKeyboardWillHideNotification object:nil];
+      [notificationCenter removeObserver:self name:UIKeyboardDidHideNotification object:nil];
     }
   });
 }
@@ -291,8 +289,23 @@ - (void)cleanupListeners
   });
 }
 
+- (void)keyboardWillShow:(NSNotification *)notification
+{
+  _state = OPENING;
+  [self keyboardWillChangeFrame:notification];
+}
+
 - (void)keyboardDidShow:(NSNotification *)notification
 {
+  [[self getDisplayLink] setPaused:YES];
+
+  auto window = [[[UIApplication sharedApplication] delegate] window];
+  CGSize windowSize = window.frame.size;
+  auto keyboardView = [self getKeyboardView];
+  _targetKeyboardHeight = windowSize.height - keyboardView.frame.origin.y;
+  _state = OPEN;
+  [self runListeners:_targetKeyboardHeight];
+
   if (_isKeyboardObserverAttached) {
     return;
   }
@@ -311,6 +324,18 @@ - (void)keyboardWillHide:(NSNotification *)notification
     [_keyboardView removeObserver:self forKeyPath:@"center"];
     _isKeyboardObserverAttached = false;
   }
+
+  _state = CLOSING;
+  [self keyboardWillChangeFrame:notification];
+}
+
+- (void)keyboardDidHide:(NSNotification *)notification
+{
+  [[self getDisplayLink] setPaused:YES];
+
+  _targetKeyboardHeight = 0;
+  _state = CLOSED;
+  [self runListeners:_targetKeyboardHeight];
 }
 
 - (void)updateKeyboardHeightDuringInteractiveDismiss:(CGPoint)oldKeyboardFrame
@@ -323,11 +348,16 @@ - (void)updateKeyboardHeightDuringInteractiveDismiss:(CGPoint)oldKeyboardFrame
   }
   float windowHeight = keyboardView.window.bounds.size.height;
   float keyboardHeight = keyboardView.frame.size.height;
+  if (keyboardHeight == 0 || keyboardView.frame.size.width != keyboardView.window.bounds.size.width) {
+    return;
+  }
   float visibleKeyboardHeight = windowHeight - (newKeyboardFrame.y - keyboardHeight / 2);
   if (oldKeyboardFrame.y > newKeyboardFrame.y) {
     _state = OPENING;
+    _isInteractiveDismissalCanceled = true;
   } else if (oldKeyboardFrame.y < newKeyboardFrame.y) {
     _state = CLOSING;
+    _isInteractiveDismissalCanceled = false;
   }
   [self runListeners:visibleKeyboardHeight];
 }
